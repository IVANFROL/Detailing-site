import { NextResponse } from 'next/server'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { name, phone, email, message, source, service } = body

    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN'
    const TELEGRAM_CHAT_IDS = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID'

    // –†–∞–∑–±–∏–≤–∞–µ–º Chat IDs –Ω–∞ –º–∞—Å—Å–∏–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    const chatIds = TELEGRAM_CHAT_IDS.split(',').map(id => id.trim())

    // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    const ip = request.headers.get('x-forwarded-for') || 
               request.headers.get('x-real-ip') || 
               '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const telegramMessage = `
üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ SLS DETAILING STUDIO

üë§ –ò–º—è: ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

${service ? `üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: ${service}` : ''}
üìã –¢–∏–ø –∑–∞—è–≤–∫–∏: ${source || '–û–±—â–∞—è –∑–∞—è–≤–∫–∞'}
${message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}` : ''}

üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: –°–∞–π—Ç SLS Detailing Studio
üîí IP: ${ip}
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
    
    const sendPromises = chatIds.map(chatId => 
      fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: telegramMessage,
          parse_mode: 'HTML',
        }),
      })
    )

    const responses = await Promise.all(sendPromises)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    const hasSuccess = responses.some(response => response.ok)
    
    if (!hasSuccess) {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram')
    }

    return NextResponse.json({ success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏' },
      { status: 500 }
    )
  }
}

